data=rbind(rep(10,10) , rep(0,10) , data)
# The default radar chart proposed by the library:
radarchart(data)
# tiff(filename = "~/Dropbox/00 PTLS 2016/20161017 Radar Plots/20161017 Radar plot1 (550x550).tiff", width = 550, height = 550, compression = "lzw")
# Custom the radarChart !
radarchart( data  , axistype=1 ,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,10,2.5), cglwd=0.8,
#custom labels
vlcex=1.0
)
# Export at 550x550
# dev.off()
library(fmsb)
# Create data: note in High school for Jonathan:
#data=as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
data=as.data.frame(matrix( c(1.5, 10, 3, 6, 9, 1, 5, 8, 4.5, 7) , ncol=10))
colnames(data)=c("field work" , "lab work", "teaching", "statistics", "bioinformatics", "plant breeding", "public speaking", "writing",  "outreach", "literature review" )
# lab work: 10
# field work: 1.5
# teaching: 3
# statistics: 6
# computational skills/programming/bioinformatics: 9
# breeding: 1
# public speaking: 5
# writing: 8
# managing:X outreach: 4.5
# literature review: 7
# Total: 56 (if total was 50 then it would be an even split)
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data=rbind(rep(10,10) , rep(0,10) , data)
# The default radar chart proposed by the library:
radarchart(data)
# tiff(filename = "~/Dropbox/00 PTLS 2016/20161017 Radar Plots/20161017 Radar plot1 (550x550).tiff", width = 550, height = 550, compression = "lzw")
# Custom the radarChart !
radarchart( data  , axistype=1 ,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,10,2.5), cglwd=0.8,
#custom labels
vlcex=1.0
)
# Export at 550x550
# dev.off()
library(diceRollers)
require(stringr)
require(rstudioapi)
strstr_sub(string = NA, start = 1L, end = -2L)
stringr::strstr_sub(string = NA, start = 1L, end = -2L)
library(stringr)
strstr_sub(string = NA, start = 1L, end = -2L)
str_sub(string = NA, start = 1L, end = -2L)
gsub("^\\s+|\\s+$", "", NA)
gsub("^\\s+|\\s+$", "", "NA")
library(diceRollers)
require(stringr)
require(rstudioapi)
paste("cat,"bat"")
paste("cat,"bat")
paste(c("cat,"bat"))
paste(c("cat", "bat")
paste(c("cat", "bat")
paste("cat", "bat")
library(diceRollers)
require(stringr)
require(rstudioapi)
library(diceRollers)
require(stringr)
require(rstudioapi)
library(diceRollers)
require(stringr)
require(rstudioapi)
library(diceRollers)
require(stringr)
require(rstudioapi)
require(stringr)
require(rstudioapi)
library(diceRollers)
require(stringr)
require(rstudioapi)
nchar("hello")
a$hat <- 3
a <- list()
a$hat <- 3
a$cat <- 4
a
is.null(a$bat)
is.null(a$cat)
is.na(a$cat)
test4
test <- rstudioapi::getActiveDocumentContext()
library(diceRollers)
require(stringr)
require(rstudioapi)
nchar("hello::")
library(diceRollers)
require(stringr)
require(rstudioapi)
library(diceRollers)
require(stringr)
require(rstudioapi)
is.function(nrow)
nrow in builtins
nrow %in% builtins
nrow %in% builtins()
nrow() %in% builtins()
"nrow" %in% builtins()
"nrowe" %in% builtins()
"nrow" %in% builtins()
library(diceRollers)
require(stringr)
require(rstudioapi)
grep("[0-9A-Za-z]*[A-Za-z]+[0-9]* *\\(", "hello cat( dog(snad carrots(", value = T)
grep("[0-9A-Za-z]*[A-Za-z]+[0-9]* *\\(", c("hello", "cat(" "dog(snad" "ca.rrots("), value = T)
grep("[0-9A-Za-z]*[A-Za-z]+[0-9]* *\\(", c("hello", "cat(", "dog(snad", "ca.rrots("), value = T)
str_extract_all("hello cat( dog(snad carrots(", "[0-9A-Za-z]*[A-Za-z]+[0-9]* *\\(", simplify = T)
str_extract_all("hello cat( dog(snad ca.rrots(", "[0-9A-Za-z]*[A-Za-z]+[0-9]* *\\(", simplify = T)
str_extract_all("hello cat( fat_dog(snad ca.rrots(", "[0-9A-Za-z]*[A-Za-z]+[0-9]* *\\(", simplify = T)
str_extract_all("hello cat( fat_dog(snad ca.rrots(", "[0-9A-Za-z\.]*[A-Za-z\.]+[0-9]* *\\(", simplify = T)
str_extract_all("hello cat( fat_dog(snad ca.rrots(", "[0-9A-Za-z\\.]*[A-Za-z\\.]+[0-9]* *\\(", simplify = T)
str_extract_all("hello cat( fat_dog(snad ca.rrots(", "[0-9A-Za-z_\\.]*[A-Za-z_\\.]+[0-9]* *\\(", simplify = T)
library(diceRollers)
require(stringr)
require(rstudioapi)
1:0
library(diceRollers)
require(stringr)
require(rstudioapi)
str_extract_all("hello \"cat\"( fat_dog(snad ca.rrots(", @"""[^""\\]*(?:\\.[^""\\]*)*""", simplify = T)
str_extract_all("hello \"cat\"( fat_dog(snad ca.rrots(", """[^""\\]*(?:\\.[^""\\]*)*""", simplify = T)
str_extract_all("hello \"cat\"( fat_dog(snad ca.rrots(", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T)
noquote(str_extract_all("hello \"cat\"( fat_dog(snad ca.rrots(", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T))
noquote(str_extract_all("print(paste(\"origFunLocs (before): \", origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T))
noquote(str_extract_all("print(pa\"s\"te(\"origFunLocs (before): \", origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T))
gsub(pattern = "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"",replacement = "x", x = "print(pa\"s\"te(\"origFunLocs (before): \", origFunLocs))")
gsub(pattern = "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"",replacement = "x", x = "print(pa\"s\"te(\"origFunLocs (before): \", ori\"gFunLocs))")
noquote(str_extract_all("print(pa\"s\"te(\"origFunLocs (before): \", origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T))
noquote(str_extract_all("print(pa\"s\"te(\"origFunLocs (before): , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T))
" Hello
My name is Sven
I am cool"
rep_len("h")
rep_len("h", length.out = 4)
rep("h", 4)
paste(rep("h", 4))
paste(unlist(rep("h", 4)))
character(length = 3)
character(length = 5)
gsub(pattern = "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"",replacement = "x", x = "print(pa\"s\"te(\"origFunLocs (before): \", ori\"gFunLocs))")
gsub(pattern = "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"",replacement = c("x","y"), x = "print(pa\"s\"te(\"origFunLocs (before): \", ori\"gFunLocs))")
gsub(pattern = "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"",replacement = c("x","y","z"), x = "print(pa\"s\"te(\"origFunLocs (before): \", ori\"gFunLocs))")
gsub(pattern = c("prin", "orig", "Locs"),replacement = c("x","y","z"), x = "print(pa\"s\"te(\"origFunLocs (before): \", ori\"gFunLocs))")
noquote(str_extract_all("print(pa\"s\"te(\"origFunLocs (before): , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T))
str_extract_all("print(pa\"s\"te(\"origFunLocs (before): , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T)
str_extract_all("print(pa\"s\"te(\"origFunLocs (before):\" , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T)
str_extract_all("print(pa\"s\"te(\"origFunLocs (before):\" , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T)[1]
str_extract_all("print(pa\"s\"te(\"origFunLocs (before):\" , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T)[2]
str_extract_all("print(pa\"s\"te(\"origFunLocs (before): , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T)
str_extract_all("print(pa\"s\"te(\"origFunLocs (before): , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T)[1]
str_extract_all("print(pa\"s\"te(\"origFunLocs (before):\" , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T)
str_extract_all("print(pa\"s\"te(\"origFunLocs (before):\" , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T)[,1]
library(diceRollers)
require(stringr)
require(rstudioapi)
library(diceRollers)
require(rstudioapi)
require(rstudioapi)
require(stringr)
str_extract_all("print(pa\"s\"te(\"origFunLocs (before):\" , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T)
str_extract_all("print(paste(origFunLocs (before): , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T)
is.na(str_extract_all("print(paste(origFunLocs (before): , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T))
is.na(str_extract_all("print(paste(origFunLocs (before): , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T))
is.null(str_extract_all("print(paste(origFunLocs (before): , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T))
str_extract_all("print(paste(origFunLocs (before): , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T) == ""
length(str_extract_all("print(paste(origFunLocs (before): , origFunLocs))", "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"", simplify = T))
library(diceRollers)
require(stringr)
require(rstudioapi)
parse("if (length(str_extract_all(origRow, quotedText, simplify = T)) > 0) {")
parse(file = file.choose())
parse(text = "if (length(str_extract_all(origRow, quotedText, simplify = T)) > 0) {")
parse(text = "if (length(str_extract_all(origRow, quotedText, simplify = T)) > 0) {")
install.packages("pryr")
library(pryr)
warnings()
install.packages("NCmisc")
library(NCmisc)
warnings()
list.functions.in.file(file.choose())
list.functions.in.file(" test("
)
list.functions.in.file(file.choose())
list.functions.in.file(file.choose())
test <- file.choose()
list.functions.in.file(test)
fn <- function(x) {
x + 1 # A comment, kept as part of the source
}
d <- getParseData(fn)
if (!is.null(d)) {
plus <- which(d$token == "'+'")
sum <- d$parent[plus]
print(d[as.character(sum),])
print(getParseText(d, sum))
}
d
fn()
fn(3)
getParseData(fn)
library(utils)
getParseData(fn)
findFun()
rstudioapi::hasFun("viewer")
rstudioapi::findFun("viewer")
parser()
devtools::install_github(repo = parser, username = halpo)
devtools::install_github(repo = "parser", username = "halpo")
devtools::install_github(halpo/parser)
devtools::install_github("halpo/parser")
library(diceRollers)
warnings()
require(stringr)
require(rstudioapi)
getParseData()
getParseData(file.choose())
parse(file.choose())
getParseData(parse(file.choose()))
test <- getParseData(parse(file.choose()))
View(test)
View(test)
ABA_peak <- 4527.95
ABA_IS_peak <- 37090.7
ng_IS_per_injection <- (10*(40/120))
ng_ABA_per_inj <- (ABA_peak/ABA_IS_peak) * ng_IS_per_injection
g_DW_per_inj <- (0.040*(40/120))
ng_per_g_DW <- ng_ABA_per_inj/g_DW_per_inj
ng_per_g_DW
ABA_peak <- 4527.95
ABA_IS_peak <- 37090.7
ng_IS_per_injection <- 10 #(10*(40/120))
ng_ABA_per_inj <- (ABA_peak/ABA_IS_peak) * ng_IS_per_injection
g_DW_per_inj <- 0.040 #(0.040*(40/120))
ng_per_g_DW <- ng_ABA_per_inj/g_DW_per_inj
ng_per_g_DW
ABA_peak <- 4527.95
ABA_IS_peak <- 37090.7
ng_IS_per_injection <- (10*(40/120))
ng_IS_added_at_start <-10 # same result because "per inj" part cancels out
ng_ABA_per_inj <- (ABA_peak/ABA_IS_peak) * ng_IS_per_injection
ng_ABA_at_start <- (ABA_peak/ABA_IS_peak) * ng_IS_added_at_start
g_DW_per_inj <- (0.040*(40/120))
g_DW_at_start <- 0.040 # same result because "per inj" part cancels out
ng_per_g_DW <- ng_ABA_per_inj/g_DW_per_inj
ng_per_g_DW
ng_per_g_DW_alt <- ng_ABA_at_start/g_DW_at_start
ng_per_g_DW_alt
testFile <- rstudioapi::getActiveDocumentContext()
testFile$path
View(test)
require %in% builtins()
"require" %in% builtins()
"required" %in% builtins()
currentFile <- rstudioapi::getActiveDocumentContext()
parsedFile <- getParseData(parse(currentFile$path))
View(parsedFile)
rownames(parsedFile)
rownames(parsedFile)[1]
parsedFile[73]
parsedFile[rownames(1)]
parsedFile[]
parsedFile
parsedFile[rownames()==1]
parsedFile[,1]
parsedFile[1,]
parsedFile[73,]
parsedFile[73,"text"]
parsedFile[72,"text"]
parsedFile[72,]
parsedFile[row.names(parsedFile)==72,]
parsedFile[row.names(parsedFile)==72,"text"]
parsedFile[,"text"=="::"]
parsedFile[,text=="::"]
parsedFile$text == "::"
parsedFile[,parsedFile$text == "::"]
parsedFile[parsedFile$text == "::",]
row.name(parsedFile[parsedFile$text == "::",])
row.names(parsedFile[parsedFile$text == "::",])
row.names(parsedFile[parsedFile$text == "::",])+1
row.names(parsedFile[parsedFile$text == "::",]) + 1
as.numeric(row.names(parsedFile[parsedFile$text == "::",])) + 1
as.character(as.numeric(row.names(parsedFile[parsedFile$text == "::",])) + 1)
View(parsedFile)
parsedFile[,row.names(parsedFile) == as.character(as.numeric(row.names(parsedFile[parsedFile$text == "::",])) + 1)]
parsedFile[row.names(parsedFile) == as.character(as.numeric(row.names(parsedFile[parsedFile$text == "::",])) + 1),]
parsedFile[row.names(parsedFile) == as.character(as.numeric(row.names(parsedFile[parsedFile$text == "::",])) + 1),]
dplyr::filter(parsedFile, row.names(parsedFile) == as.character(as.numeric(row.names(parsedFile[parsedFile$text == "::",])) + 1))
dplyr::filter(parsedFile, text=="::")
parsedFile[row.names(parsedFile) == as.numeric(row.names(parsedFile[parsedFile$text == "::",])) + 1,]
parsedFile <- dplyr::filter(parsedFile, text=="::" & token=="NS_GET")
warnings()
View(parsedFile)
parsedFile <- getParseData(parse(currentFile$path))
View(parsedFile)
parsedFile <- dplyr::filter(parsedFile, (text=="::" & token=="NS_GET") | token == "SYMBOL_FUNCTION_CALL")
View(parsedFile)
View(parsedFile)
View(parsedFile)
parsedFile <- dplyr::filter(parsedFile, (text=="::" & token=="NS_GET") | token == "SYMBOL_FUNCTION_CALL" & !(text %in% builtins()))
View(parsedFile)
is.function(NA_to_empty)
rownames(parsedFile)
parsedFile[1]
parsedFile$token[1]
parsedFile$text[3]
packageName(environment(get(parsedFile$text[3])))
parsedFile[1,]
parsedFile[17]
parsedFile[line==17]
parsedFile[line==17,]
parsedFile[line=="17",]
parsedFile[line=="17"]
dplyr::filter(parsedFile, line == 17)
parsedFile[line1=="17"]
dplyr::filter(parsedFile, line1 == 17)
parsedFile$line1[1]
nrow(parsedFile$line1[1])
n.row(parsedFile$line1[1])
NROW(parsedFile$line1[1])
parsedFile$line1[1]
dplyr::filter(parsedFile, line1 == 17)
nrow(dplyr::filter(parsedFile, line1 == 17))
nrow(dplyr::filter(parsedFile, line1 == 137))
dplyr::filter(parsedFile, line1 == 137)
parsedFile[parsedFile$line1 == 17]
parsedFile[parsedFile$line1 == 17,]
funcName <- parsedFile$text[i]
funcName <- parsedFile$text[2]
pacName <- packageName(environment(get(funcName))) # gets package name for a given function
pacName <- paste(pacName, "::", sep = "")
currentLine <- parsedFile$line1[2]
onSameLine <- dplyr::filter(parsedFile, line1 == currentLine)
parsedFile[parsedFile$line1 == 17,]
parsedFile[parsedFile$line1 == currentLine,]$col1 <- parsedFile[parsedFile$line1 == currentLine,]$col1 + nchar(pacName)
parsedFile[parsedFile$line1 == 17,]
library(diceRollers)
require(stringr)
require(rstudioapi)
library(diceRollers)
require(stringr)
require(rstudioapi)
library(diceRollers)
source('~/Dropbox/00. Code files/Packages/diceRollers/R/diceRollGUI.R')
library(diceRollers)
require(stringr)
require(rstudioapi)
library(diceRollers)
require(shiny)
require(miniUI)
require(shinythemes)
get("my_text")
diceRollers:::diceRollGUI()
source('~/Dropbox/00. Code files/Packages/diceRollers/R/diceRollGUI.R')
library(diceRollers)
diceRollers:::diceRollGUI()
source('~/Dropbox/00. Code files/Packages/diceRollers/R/diceRollGUI.R')
environment("")
environment()
packageName(environment())
packageName(environment(""))
packageName(environment(get("")))
packageName(environment(get(grep())))
packageName(environment(get("grep"))
)
packageName(environment(get("grep")))
is.function(my_text)
is.function(grep)
get("my_text")
get("grep")
get(rm)
get("rm")
get("ls")
get("c")
packageName(environment(get("c")))
packageName(environment(get("rm")))
packageName(environment(mget("my_text")))
packageName(environment(mget("my_text", ifnotfound = "rm")))
packageName(environment(mget("my_text", ifnotfound = c("rm"))))
packageName(environment(mget("my_text", ifnotfound = c("ls"))))
packageName(environment(mget("my_text", ifnotfound = list("ls"))))
mget("my_text", ifnotfound = "hello")
library(diceRollers)
require(shiny)
require(miniUI)
require(shinythemes)
library(diceRollers)
require(shiny)
require(miniUI)
require(shinythemes)
\n
"\n"
"/n"
writeLines("hello \n goodbye")
library(diceRollers)
source('~/Dropbox/00. Code files/Packages/diceRollers/R/diceRollGUI.R')
source('~/Dropbox/00. Code files/Packages/diceRollers/R/diceRollGUI.R')
mget("miniPage")
require(shiny)
require(miniUI)
require(shinythemes)
library(diceRollers)
require(shiny)
require(miniUI)
require(shinythemes)
mget("my_text", ifnotfound = "hello")
mget("rm", ifnotfound = "hello")
mget("rm", ifnotfound = stop())
dynGet("rm", ifnotfound = stop())
mget("rm", ifnotfound = "hello")
mget("rm", ifnotfound = list("hello"))
mget("grep", ifnotfound = "hello")
exists(grep)
exists("grep")
exists("gre")
exists("my_text")
exists("rm")
exists("addPackageNames")
library(diceRollers)
require(shiny)
require(miniUI)
require(shinythemes)
library(diceRollers)
require(shiny)
require(miniUI)
require(shinythemes)
source('~/Dropbox/00. Code files/Packages/diceRollers/R/diceRollGUI.R')
library(diceRollers)
diceRollers:::diceRollGUI()
exists("::")
library(diceRollers)
library(diceRollers)
library(diceRollers)
library(diceRollers)
library(diceRollers)
context <- rstudioapi::getActiveDocumentContext()
cursorPos <- context$selection[[1]]$range$start
cursorEnd <- context$selection[[1]]$range$end
if (cursorPos != cursorEnd) {
writeLines("Place cursor at the beginning of the function name and try again.")
stop("Text selection provided when cursor at start of function name expected.")
}
cursorEnd
identical(cursorEnd,cursorPos)
if (identical(cursorEnd,cursorPos)) {
writeLines("Place cursor at the beginning of the function name and try again.")
stop("Text selection provided when cursor at start of function name expected.")
}
context$selection[[1]]$range$end
context$content[selection_start["row"]]
cursorPos["row"]
cursorPos["column"]
cursorPos["column"] +1
indent <- stringr::str_match(cursorPos["row"], "^\\s*")
View(indent)
context$selection[[1]]$range
left_side <- stringr::str_sub(cursorPos["row"], start = 1, end = selection_start["column"] - 1)
left_side <- stringr::str_sub(cursorPos["row"], start = 1, end = cursorPos["column"] - 1)
word_by_end <- "\\w*$" # "[^\\w]*(\\w*)$" with $ anchor, actually search from right side end
left_partial_word <- stringr::str_match(left_side, word_by_end)[1]
left_edge <- stringr::str_locate(left_side, word_by_end)[1] - 1 # need -1 now when regex pattern changed. previous pattern need a leading nonword character, missed when word in line start
right_side <- stringr::str_sub(cursorPos["row"], start = cursorPos["column"],
end = nchar(cursorPos["row"]))
starting_word <- "^\\w*" # symmetrical with left side
right_partial_word <- stringr::str_extract(right_side, starting_word)
right_edge <- stringr::str_locate(right_side, starting_word)[2] +
selection_end["column"] # index offset from cursor
cursorPos["row"]
context$content[selection_start["row"]]
context$content[cursorPos["row"]]
context <- rstudioapi::getActiveDocumentContext()
cursorPos <- context$selection[[1]]$range$start
cursorEnd <- context$selection[[1]]$range$end
if (!identical(cursorEnd,cursorPos)) {
writeLines("Place cursor at the beginning of the function name and try again.")
stop("Text selection provided when cursor at start of function name expected.")
}
cursorPos["row"]
cursorPos["column"]
context$content[cursorPos["row"]]
parsedText <- utils::getParseData(parse("  getActiveDocumentContext()# Get the starting position of the cursor"))
parsedText <- utils::getParseData(parse(text = "  getActiveDocumentContext()# Get the starting position of the cursor"))
View(parsedText)
functionInfo <- dplyr::filter(parsedText, col1 == cursorPos["column"] & token == "SYMBOL_FUNCTION_CALL")
View(functionInfo)
funcName <- functionInfo$text
library(diceRollers)
library(diceRollers)
library(diceRollers)
library(diceRollers)
library(diceRollers)
library(diceRollers)
library(diceRollers)
library(diceRollers)
diceRollers:::diceRollGUI()
library(stringr)
diceRollers:::diceRollGUI()
require(shiny)
require(miniUI)
require(shinythemes)
diceRollers:::diceRollGUI()
