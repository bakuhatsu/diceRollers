{
    "collab_server" : "",
    "contents" : "#################################\n# 10/12/2016                    #\n# Sven Nelson                   #\n# diceRoll gui (shinyGadget)    #\n#################################\n\n\nrequire(shiny)\nrequire(miniUI)\nrequire(shinythemes)\n\ndiceRollGUI <- function(numOfDice, sides=6) {\n\n  ui <- miniUI::miniPage(\n    #shinythemes::themeSelector(), # spacelab was good\n    theme = shinythemes::shinytheme(\"spacelab\"),\n    miniUI::gadgetTitleBar(\"Roll the dice!\"),\n    miniUI::miniTabstripPanel(\n      miniUI::miniTabPanel(\"Dice roller\", icon = shiny::icon(\"glyphicon glyphicon-retweet\", lib = \"glyphicon\"),\n                   miniUI::miniContentPanel(\n                     shiny::textInput(\"numDice\", label = \"Number of dice?\", value = 2),\n                     #textInput(\"diceSides\", label = \"How many sides per die?\", placeholder = \"6\", value = 6),\n                     shiny::sliderInput(\"diceSides\", label = \"How many sides per die?\",\n                                 min=2, max=20, value=6, step = 1),\n                     miniUI::miniButtonBlock(shiny::actionButton(\"go\", label = \"Roll!\", icon = shiny::icon(\"glyphicon glyphicon-retweet\", lib = \"glyphicon\"))), # , actionButton(\"settings\", label = \"Hit settings\", icon = icon(\"gears\"))\n                     #br(),\n                     shiny::textOutput(\"roll\", container = htmltools::pre)\n                   )\n      ),\n      miniUI::miniTabPanel(\"Hit parameters\", icon = shiny::icon(\"sliders\"),\n                   miniUI::miniContentPanel(\n                     htmltools::h4(\"Hit minimum:\"),\n                     shiny::uiOutput(\"minHitSlider\"),\n                     htmltools::h4(\"Doubles on:\"),\n                     shiny::uiOutput(\"selectDoubles\")\n                   )\n      )\n    )\n  )\n\n  server <- function(input, output, session) {\n    output$selectDoubles <- shiny::renderUI({\n      possDbl <- input$minHit:input$diceSides\n      shiny::checkboxGroupInput(\"dblsOn\", NULL, possDbl, inline = T) # selected = 6,\n    })\n    #output$diceSides <- input$diceSides\n    output$minHitSlider <- shiny::renderUI({\n      shiny::sliderInput(\"minHit\", label = NULL, min = 1, max = input$diceSides, value = 4, sep = \"\", step = 1)\n    })\n\n    my_text <- shiny::reactive({\n      if (input$go == 0) {\n        return()\n      }\n      shiny::isolate({\n        input$go\n        #print(as.numeric(input$dblsOn)) # code for testing\n        diceRollers::diceRoll(input$numDice, input$diceSides, hitLow = input$minHit, double = as.numeric(input$dblsOn))\n      })\n    })\n    output$roll <- shiny::renderPrint({\n      my_text()\n    })\n\n    shiny::observeEvent(input$done, {\n      shiny::stopApp(NULL)\n    })\n  }\n\n  shiny::runGadget(ui, server, viewer = shiny::dialogViewer(\"Dice Roll\", width = 200, height = 405))\n}\n",
    "created" : 1476494307670.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4104864681",
    "id" : "38087E72",
    "lastKnownWriteTime" : 1477601443,
    "last_content_update" : 1477601443317,
    "path" : "~/Dropbox/00. Code files/Packages/diceRollers/R/diceRollGUI.R",
    "project_path" : "R/diceRollGUI.R",
    "properties" : {
        "docOutlineVisible" : "0",
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}